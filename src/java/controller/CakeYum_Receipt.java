/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;
import com.itextpdf.text.pdf.draw.VerticalPositionMark;

import java.io.IOException;
import java.io.OutputStream;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import model.*;

/**
 *
 * @author chris
 */
public class CakeYum_Receipt extends HttpServlet {
    private Connection conn;

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        if (session.getAttribute("username") == null) {
            response.sendRedirect("LoginRedirect");
        } else {
            response.setContentType("application/pdf");
            OutputStream os = response.getOutputStream();
            try {
                String driver = getServletContext().getInitParameter("jdbcClassName");
                String username = getServletContext().getInitParameter("dbUsername");
                String password = getServletContext().getInitParameter("dbPassword");

                StringBuffer url = new StringBuffer((String) getServletContext().getInitParameter("jdbcDriverURL"))
                        .append("://")
                        .append((String) getServletContext().getInitParameter("dbHostName"))
                        .append(":")
                        .append((String) getServletContext().getInitParameter("dbPort"))
                        .append("/")
                        .append((String) getServletContext().getInitParameter("dbName"))
                        .append((String) getServletContext().getInitParameter("addlParams"));

                // gets current user's ID
                UserGetter ug = new UserGetter(driver, username, password, url.toString());
                int userID = ug.getUserID((String) session.getAttribute("username"));

                // gets all the orders associated with the current user
                OrderGetter og = new OrderGetter(driver, username, password, url.toString());
                ArrayList<Integer> orderIDs = og.getOrderIDs(userID);
                int orderCount = orderIDs.size();

                // PDF generation
                String relativePath = "../../";
                String absolutePath = getServletContext().getRealPath(relativePath);
                //Generate a PDF
                Document document = new Document();
                //set size of document
                Rectangle rectangle = new Rectangle(PageSize.LETTER);
                document.setPageSize(rectangle);

                try {
                    PdfWriter writer = PdfWriter.getInstance(document, os);
                    writer.setPageEvent(new PdfPageEventHelper() {
                        Font footerFont = new Font(Font.FontFamily.HELVETICA, 9, Font.ITALIC, new BaseColor(77, 77, 77));
                        PdfContentByte cb;
                        PdfTemplate total;

                        @Override
                        public void onOpenDocument(PdfWriter writer, Document document) {
                            cb = writer.getDirectContent();
                            total = cb.createTemplate(30, 16);
                        }

                        @Override
                        public void onEndPage(PdfWriter writer, Document document) {
                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss");
                            Phrase dateTimeAuthor = new Phrase(LocalDateTime.now().format(formatter) + "  |  " + "Generated by " + session.getAttribute("username"), footerFont);
                            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT,
                                    dateTimeAuthor,
                                    90, document.bottom() - 10, 0);
                            PdfPTable table = new PdfPTable(2);
                            try {
                                table.setWidths(new int[]{24, 24});
                                table.setTotalWidth(100);
                                table.setLockedWidth(true);
                                table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                                table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);

                                table.addCell(new Phrase("Page " + writer.getPageNumber() + " of ", footerFont));
                                PdfPCell cell = new PdfPCell(Image.getInstance(total));
                                cell.setBorder(Rectangle.NO_BORDER);
                                table.addCell(cell);
                                table.writeSelectedRows(0, -1, 463, document.bottom(), writer.getDirectContent());
                            } catch (BadElementException bee) {
                                bee.printStackTrace();
                            } catch (DocumentException de) {
                                de.printStackTrace();
                            }
                        }

                        @Override
                        public void onCloseDocument(PdfWriter writer, Document document) {
                            ColumnText.showTextAligned(total, Element.ALIGN_LEFT,
                                    new Phrase(String.valueOf(writer.getPageNumber()), footerFont),
                                    1, 5, 0);
                        }
                    });

                    document.open();
                    String date = "" + LocalDate.now();

                    Chunk glue = new Chunk(new VerticalPositionMark());
                    Paragraph nameDate = new Paragraph("Name: " + session.getAttribute("username"));
                    nameDate.add(new Chunk(glue));
                    nameDate.add("Date: " + date + "\n\n");
                    Paragraph Date = new Paragraph();
                    Date.setAlignment(Element.ALIGN_RIGHT);
                    Paragraph title = new Paragraph("Order Receipt", new Font(Font.FontFamily.UNDEFINED, 20F, Font.BOLD));
                    title.setAlignment(Element.ALIGN_CENTER);

                    //add title to document
                    document.add(nameDate);
                    document.add(Date);
                    document.add(title);

                    int ctr = 0;

                    // instantiating a PdfCanvas object 
                    LineSeparator ls = new LineSeparator();

                    for (int i = 0; i <= orderCount - 1; i++) {

                        document.add(new Chunk(ls));
                        int orderID = orderIDs.get(i);
                        ArrayList<Order> orders = og.getOrderInfo(orderID);
                        if (orders.size() == 1) {
                            ctr += orders.size() + 5;
                        } else if (orders.size() == 2) {
                            ctr += orders.size() + 4;
                        } else if (orders.size() == 3) {
                            ctr += orders.size() + 3;
                        } else if (orders.size() == 4) {
                            ctr += orders.size() + 2;
                        }

                        if (ctr >= 20) {
                            document.newPage();
                            ctr = 0;
                        }

                        LocalDateTime dateTime = orders.get(0).getDateTime();
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm:ss");

                        Paragraph OrderID = new Paragraph("Order ID: " + orderID);
                        Paragraph DateTime = new Paragraph("Placed on: " + dateTime.format(formatter) + "\n\n");

                        //add to document
                        document.add(OrderID);
                        document.add(DateTime);

                        //table
                        PdfPTable table = new PdfPTable(3);
                        PdfPCell cell1 = new PdfPCell(new Paragraph("Product Name"));
                        table.addCell(cell1);
                        PdfPCell cell2 = new PdfPCell(new Paragraph("Quantity"));
                        table.addCell(cell2);
                        PdfPCell cell3 = new PdfPCell(new Paragraph("Price"));
                        table.addCell(cell3);

                        double total = 0;
                        // loops through each row associated with a certain order ID
                        for (int j = 0; j < orders.size(); j++) {
                            Order order = (Order) orders.get(j);

                            int productID = order.getProductID();
                            int quantity = order.getQuantity();
                            double price = order.getCost();
                            total += price;

                            // gets product information for a given product
                            ProductGetter pg = new ProductGetter(driver, username, password, url.toString());
                            Product product = pg.getProduct(productID);

                            PdfPCell itemName = new PdfPCell(new Paragraph(product.getName()));
                            PdfPCell itemQuantity = new PdfPCell(new Paragraph("" + quantity));
                            PdfPCell itemPrice = new PdfPCell(new Paragraph(String.format("%.2f", price)));

                            //add to table
                            table.addCell(itemName);
                            table.addCell(itemQuantity);
                            table.addCell(itemPrice);

                        }
                        PdfPCell blank = new PdfPCell(new Paragraph(""));
                        PdfPCell Total = new PdfPCell(new Paragraph(String.format("Total:"), new Font(Font.FontFamily.UNDEFINED, 12F, Font.BOLD)));
                        PdfPCell totalPrice = new PdfPCell(new Paragraph(String.format("%.2f", total), new Font(Font.FontFamily.UNDEFINED, 12F, Font.BOLD)));

                        //add to table
                        table.addCell(blank);
                        table.addCell(Total);
                        table.addCell(totalPrice);

                        //add to document
                        document.add(table);

                    }
                    document.add(new Chunk(ls));

                    document.close();
                } catch (DocumentException de) {
                    de.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            response.sendRedirect("purchases.jsp");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
